require("Test.Framework.Extensions.HostExtensions");local Task = require("Core.Common.Task");local Test = require("Test.Framework.Wrapper");local Framework = {};function Framework:__init();self.m_tests = {};end;function Framework:AddTest(name, func);table.insert(self.m_tests, Test(name, Task(func)));end;function Framework:Run(logger);logger:LogInfo("Running tests...");local successfull = 0;local failed = 0;for _, test in ipairs(self.m_tests) do;test:Run(logger);if test:WasSuccessfull() then;successfull = successfull + 1;else;failed = failed + 1;end;end;logger:LogInfo(;"Tests finished with ";.. successfull .. " successfull tests and ";.. failed .. " failed tests";);end;return Utils.Class.CreateClass(Framework, "Test.Framework")();local EventPullAdapter = require("Core.Event.EventPullAdapter");local Wrapper = {};function Wrapper:__init(name, task);self.m_name = name;self.m_task = task;end;function Wrapper:Run(logger);logger:LogInfo("Test: \"" .. self.m_name .. "\" running...");local testLogger = require("Core.Common.Logger")("TestFramework", 1);testLogger.OnLog:AddListener(function(message);Utils.File.Write("/Logs/Tests/" .. self.m_name .. ".log", "a", message .. "\n", true);end);testLogger.OnClear:AddListener(function();Utils.File.Write("/Logs/Tests/" .. self.m_name .. ".log", "w", "", true);end);testLogger:Clear();___logger:setLogger(testLogger);EventPullAdapter:Initialize(testLogger:subLogger("EventPullAdapter"));self.m_task:Execute(testLogger);self.m_task:Close();___logger:revert();if self.m_task:IsSuccess() then;local message = "Test: \"" .. self.m_name .. "\" passed";logger:LogInfo(message);testLogger:LogInfo(message);else;local message = "Test: \"" .. self.m_name .. "\" failed with error:";local traceback = self.m_task:GetTraceback();logger:LogError(message, traceback);testLogger:LogError(message, traceback);end;end;function Wrapper:WasSuccessfull();return self.m_task:IsSuccess();end;return Utils.Class.CreateClass(Wrapper, "Test.Framework.Wrapper");local HostExtensions = {};function HostExtensions:AddTesting();local testFramework = require("Test.Framework.init");for _, module in pairs(PackageLoader.CurrentPackage.Modules) do;module:Load();end;return testFramework;end;Utils.Class.ExtendClass(require("Hosting.Host"), HostExtensions);