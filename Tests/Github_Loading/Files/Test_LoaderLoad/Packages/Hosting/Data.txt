local EventPullAdapter = require("Core.Event.EventPullAdapter");local JsonSerializer = require("Core.Json.JsonSerializer");local ServiceCollection = require("Hosting.ServiceCollection");local Host = {};Host._Static__ReadyTasks = {};function Host:__init(logger, name, jsonSerializer);self.m_jsonSerializer = jsonSerializer or JsonSerializer.Static__Serializer;self.m_logger = logger;self.m_name = name or "Host";self.m_ready = false;self.Services = ServiceCollection();EventPullAdapter:Initialize(logger:subLogger("EventPullAdapter"));for _, task in pairs(self._Static__ReadyTasks) do;task:Execute(self);task:Close();task:LogError(self.m_logger, false);end;self.m_logger:LogDebug(self.m_name .. " starting...");end;function Host:GetName();return self.m_name;end;function Host:GetJsonSerializer();return self.m_jsonSerializer;end;function Host:GetHostLogger();return self.m_logger;end;function Host:CreateLogger(name);return self.m_logger:subLogger(name);end;function Host:Ready();if self.m_ready then;return;end;self.m_logger:LogInfo(self.m_name .. " started");self.m_ready = true;end;function Host:Run();self:Ready();EventPullAdapter:Run();end;function Host:RunCycle(timeoutSeconds);if not self.m_ready then;error("cannot run cycle whitout a ready call");end;self.m_logger:LogTrace("running cycle");EventPullAdapter:WaitForAll(timeoutSeconds);end;return Utils.Class.CreateClass(Host, "Hosting.Host");local ServiceCollection = {};function ServiceCollection:__init();self.m_services = {};end;function ServiceCollection:AddService(service);self.m_services[typeof(service).Name] = service;end;function ServiceCollection:GetService(serviceTypeName);return self.m_services[serviceTypeName];end;return Utils.Class.CreateClass(ServiceCollection, "Hosting.ServiceCollection");