local PCIDeviceReference = require("Core.References.PCIDeviceReference");local Cache = require("Core.Adapter.Cache")();local InternetCard = {};function InternetCard:__init(index);if not index then;index = 1;end;local internetCardAdapter = {};if Cache:TryGet(index, internetCardAdapter) then;return internetCardAdapter.Value;end;local internetCard = PCIDeviceReference(classes.InternetCard_C, index);if not internetCard:Fetch() then;error("no internet card found");end;self.m_refInternetCard = internetCard;Cache:Add(index, self);end;function InternetCard:Download(url, logger);if logger then;logger:LogTrace("downloading from: '" .. url .. "'...");end;local req = self.m_refInternetCard:Get():request(url, 'GET', '');repeat until req:canGet();local code, data = req:get();if logger then;logger:LogTrace("downloaded from: '" .. url .. "'");end;if code > 302 then;return false, data, code;end;return true, data, code;end;return Utils.Class.CreateClass(InternetCard, "Adapter.Computer.InternetCard");local ProxyReference = require("Core.References.ProxyReference");local PCIDeviceReference = require("Core.References.PCIDeviceReference");local Cache = require("Core.Adapter.Cache")();local NetworkCard = {};function NetworkCard:__init(idOrIndex);	self.m_openPorts = {};	if not idOrIndex then;		idOrIndex = 1;	end;;	local networkCardAdapter = {};	if Cache:TryGet(idOrIndex, networkCardAdapter) then;		return networkCardAdapter.Value;	end;	local networkCard;	if type(idOrIndex) == 'string' then;;		networkCard = ProxyReference(idOrIndex);	else;;		networkCard = PCIDeviceReference(classes.NetworkCard_C, idOrIndex);	end;	if not networkCard:Fetch() then;		error("no network card found");	end;	self.m_refNetworkCard = networkCard;	Cache:Add(idOrIndex, self);	self:CloseAllPorts();end;function NetworkCard:GetIPAddress();	return self.m_refNetworkCard:Get().id;end;function NetworkCard:GetNick();	return self.m_refNetworkCard:Get().nick;end;function NetworkCard:Listen();	event.listen(self.m_refNetworkCard);end;function NetworkCard:OpenPort(port);	if self.m_openPorts[port] then;		return false;	end;	self.m_refNetworkCard:Get():open(port);	self.m_openPorts[port] = true;	return true;end;function NetworkCard:ClosePort(port);	self.m_openPorts[port] = nil;	self.m_refNetworkCard:Get():close(port);end;function NetworkCard:CloseAllPorts();	self.m_openPorts = {};	self.m_refNetworkCard:Get():closeAll();end;function NetworkCard:Send(address, port, ...);	self.m_refNetworkCard:Get():send(address, port, ...);end;function NetworkCard:BroadCast(port, ...);	self.m_refNetworkCard:Get():broadcast(port, ...);end;return Utils.Class.CreateClass(NetworkCard, 'Adapter.Computer.NetworkCard');